// <auto-generated />
using System;
using ITServicePortfolioManager.DAL.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ITServicePortfolioManager.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250603133209_AddCreateTimeForTask")]
    partial class AddCreateTimeForTask
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ITServicePortfolioManager.DAL.Entities.ServicePortfolioResultEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("CompanyIncome")
                        .HasColumnType("double precision");

                    b.Property<double[]>("ProvidersIncome")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.ToTable("ServicePortfolioResults");
                });

            modelBuilder.Entity("ITServicePortfolioManager.DAL.Entities.TaskEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CountProvider")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NameAlgorithm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalHumanResource")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ITServicePortfolioManager.DAL.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ITServicePortfolioManager.DAL.Entities.ServicePortfolioResultEntity", b =>
                {
                    b.HasOne("ITServicePortfolioManager.DAL.Entities.TaskEntity", "Task")
                        .WithOne()
                        .HasForeignKey("ITServicePortfolioManager.DAL.Entities.ServicePortfolioResultEntity", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("ITServicePortfolioManager.DAL.Entities.CommonEntity.PortfolioCellEntity", "Portfolio", b1 =>
                        {
                            b1.Property<long>("ServicePortfolioResultEntityId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<int>("GroupIndex")
                                .HasColumnType("integer");

                            b1.Property<int>("ProviderIndex")
                                .HasColumnType("integer");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("ServicePortfolioResultEntityId", "Id");

                            b1.ToTable("ServicePortfolioResults");

                            b1.ToJson("Portfolio");

                            b1.WithOwner()
                                .HasForeignKey("ServicePortfolioResultEntityId");
                        });

                    b.Navigation("Portfolio");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ITServicePortfolioManager.DAL.Entities.TaskEntity", b =>
                {
                    b.HasOne("ITServicePortfolioManager.DAL.Entities.UserEntity", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("ITServicePortfolioManager.DAL.Entities.CommonEntity.GroupServiceEntity", "Groups", b1 =>
                        {
                            b1.Property<long>("TaskEntityId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<long>("IndexProvider")
                                .HasColumnType("bigint");

                            b1.HasKey("TaskEntityId", "Id");

                            b1.ToTable("Tasks");

                            b1.ToJson("Groups");

                            b1.WithOwner()
                                .HasForeignKey("TaskEntityId");

                            b1.OwnsMany("ITServicePortfolioManager.DAL.Entities.CommonEntity.ServiceEntity", "Services", b2 =>
                                {
                                    b2.Property<long>("GroupServiceEntityTaskEntityId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("GroupServiceEntityId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<double>("Discount")
                                        .HasColumnType("double precision");

                                    b2.Property<double>("IncomeForProvider")
                                        .HasColumnType("double precision");

                                    b2.Property<int>("LabourIntensity")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Price")
                                        .HasColumnType("integer");

                                    b2.HasKey("GroupServiceEntityTaskEntityId", "GroupServiceEntityId", "Id");

                                    b2.ToTable("Tasks");

                                    b2.ToJson("Services");

                                    b2.WithOwner()
                                        .HasForeignKey("GroupServiceEntityTaskEntityId", "GroupServiceEntityId");
                                });

                            b1.Navigation("Services");
                        });

                    b.Navigation("Groups");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITServicePortfolioManager.DAL.Entities.UserEntity", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
